// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/linggaaskaedo/go-playground-wire-v3/lib/auth"
	"github.com/linggaaskaedo/go-playground-wire-v3/lib/database"
	"github.com/linggaaskaedo/go-playground-wire-v3/lib/http"
	"github.com/linggaaskaedo/go-playground-wire-v3/lib/http/router"
	"github.com/linggaaskaedo/go-playground-wire-v3/lib/scheduler"
	"github.com/linggaaskaedo/go-playground-wire-v3/lib/scheduler/task"
	"github.com/linggaaskaedo/go-playground-wire-v3/src/handler/rest"
	scheduler2 "github.com/linggaaskaedo/go-playground-wire-v3/src/handler/scheduler"
	"github.com/linggaaskaedo/go-playground-wire-v3/src/module/news/repository"
	"github.com/linggaaskaedo/go-playground-wire-v3/src/module/news/service"
	repository2 "github.com/linggaaskaedo/go-playground-wire-v3/src/module/product/repository"
	service2 "github.com/linggaaskaedo/go-playground-wire-v3/src/module/product/service"
)

// Injectors from wire.go:

func InitMySQL() *database.MysqlImpl {
	mysqlImpl := database.NewMysqlClient()
	return mysqlImpl
}

func InitPostgres() *database.PostgresImpl {
	postgresImpl := database.NewPostgresClient()
	return postgresImpl
}

func InitScribble() *database.ScribleImpl {
	scribleImpl := database.NewScribleClient()
	return scribleImpl
}

func InitServer(a *database.MysqlImpl, b *database.PostgresImpl, c *database.ScribleImpl) *http.HttpImpl {
	jwtTokenImpl := auth.NewJwt(c)
	newsRepositoryImpl := repository.NewNewsRepository(a, b)
	newsServiceImpl := service.NewNewsService(jwtTokenImpl, newsRepositoryImpl)
	productRepositoryImpl := repository2.NewProductRepository(a, b)
	productServiceImpl := service2.NewProductService(jwtTokenImpl, productRepositoryImpl)
	restHandlerImpl := rest.NewRestHandler(newsServiceImpl, productServiceImpl)
	httpRouterImpl := router.NewHttpRouter(restHandlerImpl)
	httpImpl := http.NewHttpProtocol(httpRouterImpl)
	return httpImpl
}

func InitScheduler(a *database.MysqlImpl, b *database.PostgresImpl, c *database.ScribleImpl) *scheduler.SchedulerImpl {
	jwtTokenImpl := auth.NewJwt(c)
	newsRepositoryImpl := repository.NewNewsRepository(a, b)
	newsServiceImpl := service.NewNewsService(jwtTokenImpl, newsRepositoryImpl)
	schedulerHandlerImpl := scheduler2.NewSchedulerHandler(newsServiceImpl)
	schedulerTaskImpl := task.NewSchedulerTask(schedulerHandlerImpl)
	schedulerImpl := scheduler.NewScheduler(schedulerTaskImpl)
	return schedulerImpl
}

// wire.go:

// wiring jwt auth
var jwtAuth = wire.NewSet(auth.NewJwt, wire.Bind(
	new(auth.JwtToken),
	new(*auth.JwtTokenImpl),
),
)

// Wiring for domain
// news
var newsRepo = wire.NewSet(repository.NewNewsRepository, wire.Bind(
	new(repository.NewsRepository),
	new(*repository.NewsRepositoryImpl),
),
)

var newsSvc = wire.NewSet(service.NewNewsService, wire.Bind(
	new(service.NewsService),
	new(*service.NewsServiceImpl),
),
)

// product
var productRepo = wire.NewSet(repository2.NewProductRepository, wire.Bind(
	new(repository2.ProductRepository),
	new(*repository2.ProductRepositoryImpl),
),
)

var productSvc = wire.NewSet(service2.NewProductService, wire.Bind(
	new(service2.ProductService),
	new(*service2.ProductServiceImpl),
),
)

// Wiring for http protocol
var restHandler = wire.NewSet(rest.NewRestHandler)

var schedulerHandler = wire.NewSet(scheduler2.NewSchedulerHandler)

var schedulerTask = wire.NewSet(task.NewSchedulerTask)

// Wiring protocol routing
var httpRouter = wire.NewSet(router.NewHttpRouter)
